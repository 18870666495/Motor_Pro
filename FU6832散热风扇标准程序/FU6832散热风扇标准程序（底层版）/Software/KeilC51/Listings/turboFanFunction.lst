C51 COMPILER V9.53.0.0   TURBOFANFUNCTION                                                  04/09/2024 13:54:53 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE TURBOFANFUNCTION
OBJECT MODULE PLACED IN .\Objects\turboFanFunction.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\User\source\Application\turboFanFunction.c LARGE OMF2 OPTIMIZE(8,SPEE
                    -D) BROWSE INCDIR(..\FU68xx_Hardware_Driver\Include;..\User\include) DEBUG PRINT(.\Listings\turboFanFunction.lst) TABS(2)
                    - OBJECT(.\Objects\turboFanFunction.obj)

line level    source

   1          /**
   2            ******************************************************************************
   3            * @file           : turboFanFunction.c
   4            * @copyright      : (c) 2022, Fortior Tech
   5            * @brief          : 
   6            * @date           : 2023-03-16
   7            * @version        : 1.0.0
   8            *
   9            ******************************************************************************
  10            * @attention
  11            *
  12            * This software is licensed under terms that can be found in the LICENSE file
  13            * in the root directory of this software component.
  14            * If no LICENSE file comes with this software, it is provided AS-IS.
  15            *
  16            ******************************************************************************
  17            */  
  18          
  19          /* Includes ------------------------------------------------------------------*/
  20          #include <FU68xx_4.h>
  21          /* Private includes ----------------------------------------------------------*/
  22          #include "MyProject.h"
  23          
  24          /* Private typedef -----------------------------------------------------------*/
  25          
  26          /* Private define ------------------------------------------------------------*/
  27          #define AVC_TURBOFAN_ALARMTEST_Enable         (0)                                     /*!< ÂïüÁî® AVC Â∞àÁ
             -î® TurboFan Ë≠¶Â†±Ê∏¨Ë©¶  @param (0) Á¶ÅÁî® @param (1) ÂïüÁî® */
  28          #define AVC_TURBOFAN_MASTER_TIMEOUT           (1000)                                  /*!< (ÂñÆ‰Ωç: mS) AV
             -C Â∞àÁî® TurboFan ‰∏ªÊ©üÁôºÂïèÈÄæÊôÇÊôÇÈñì [ÁØÑÂúç: 500 ~ 2000] */
  29          #define AVC_TURBOFAN_REFRESH_TIM              (500)                                   /*!< (ÂñÆ‰Ωç: mS) AV
             -C Â∞àÁî® TurboFan Ë®äÊÅØÊõ¥Êñ∞ÊôÇÈñì [ÁØÑÂúç: 500 ~ 2000] @note ÈúÄÂ∞èÊñº AVC_TURBOFAN_MASTER_TIMEOUT ÂèÉÊï∏ */
  30          
  31          
  32          #define AVC_TURBOFAN_HEADER_ID                ('F')
  33          #define AVC_TURBOFAN_ALARM_CHAR               ('A')
  34          #define AVC_TURBOFAN_NORMAL_CHAR              ('S')
  35          
  36          
  37          #if   (AVC_TURBOFAN_TYPE == MASTER)
  38           #define AVC_TURBOFAN_TYPE_ID                 ('M')
  39           #define AVC_TURBOFAN_GET_ID                  ('S')
  40           
  41          #elif (AVC_TURBOFAN_TYPE == SLAVE)
               #define AVC_TURBOFAN_TYPE_ID                 ('S')
               #define AVC_TURBOFAN_GET_ID                  ('M')
              #endif
  45          
  46          /* Private macro -------------------------------------------------------------*/
  47          
  48          /* Private variables ---------------------------------------------------------*/
  49          TURBOFAN_HandleTypeDef c_TurboFan;
  50          
C51 COMPILER V9.53.0.0   TURBOFANFUNCTION                                                  04/09/2024 13:54:53 PAGE 2   

  51          /* Private function prototypes -----------------------------------------------*/
  52          
  53          /* Private user code ---------------------------------------------------------*/
  54          /**
  55            * @brief  AVC_TurboFan ÂàùÂßãÂåñÂáΩÊï∏
  56            * @retval ÁÑ°
  57            */
  58          void TurboFan_Initial(void)
  59          {
  60   1        c_TurboFan.isError   = AVC_TURBOFAN_NORMAL_CHAR;
  61   1        
  62   1        c_TurboFan.isTirg    = 0; 
  63   1        c_TurboFan.TimeCount = AVC_TURBOFAN_DETECTION_TIME;
  64   1        
  65   1        c_TurboFan.Tx_DATA[0] = AVC_TURBOFAN_HEADER_ID;   // TurboFan Ë≥áË®äÊ™îÈ†≠
  66   1        c_TurboFan.Tx_DATA[1] = AVC_TURBOFAN_TYPE_ID;     // TurboFan Ê®°Âºè ID
  67   1        c_TurboFan.Tx_DATA[2] = 'R';                      // TurboFan ÈõªÊ©üÁãÄÊÖã‰ª£Ëôü
  68   1        c_TurboFan.Tx_DATA[3] = '9';                      // TurboFan ÈõªÊ©üÁãÄÊÖãÈöéÊÆµ
  69   1        c_TurboFan.Tx_DATA[4] = c_TurboFan.isError;       // TurboFan Ë≠¶Â†±
  70   1        c_TurboFan.Tx_DATA[5] = '_';                      // TurboFan È†êÁïô
  71   1        c_TurboFan.Tx_DATA[6] = '_';                      // TurboFan È†êÁïô
  72   1        c_TurboFan.Tx_DATA[7] = 0x00;                     // TurboFan CRC-8 Ê†°È©ó
  73   1      }
  74          
  75          
  76          /**
  77            * @brief  AVC_TurboFan Ë®àÊï∏Âô®‰∫ã‰ª∂
  78            * @note   Ë©≤ÂáΩÊï∏ÂÉÖËÉΩÂ≠òÂú®Êñº SYStick_INT ‰∏≠Êñ∑ÂáΩÊï∏‰∏≠Ôºå‰∏çÂèØÊñºÂÖ∂‰ªñÁ®ãÂ∫èÂü∑Ë°åÈöéÊÆµË™øÁî®
  79            * @retval ÁÑ°
  80            */
  81          void TurboFan_CountEvent(void)
  82          {
  83   1        if (c_TurboFan.TimeCount > 0)
  84   1          c_TurboFan.TimeCount--;
  85   1      
  86   1        if (c_TurboFan.Refresh_TIM > 0)
  87   1          c_TurboFan.Refresh_TIM--;
  88   1      }
  89          
  90          
  91          /**
  92            * @brief  AVC_TurboFan ËôïÁêÜ‰∫ã‰ª∂ÂáΩÊï∏
  93            * @note   Ë©≤ÂáΩÊï∏Áî®‰æÜËôïÁêÜTurboFanÁõ∏ÈóúÈÅãË°åÊ©üÂà∂Ôºå‰∏îÂÉÖËÉΩÂ≠òÂú®Êñº‰∏ªÁ®ãÂ∫è‰∏≠Âü∑Ë°åÔºå‰∏çÂè
             -ØÊñºÂÖ∂‰ªñÁ®ãÂ∫èÂü∑Ë°åÈöéÊÆµË™øÁî®
  94            * @retval ÁÑ°
  95            */
  96          void TurboFan_ProcessEvent(void)
  97          {
  98   1        #if (AVC_TURBOFAN_TYPE == MASTER)
  99   1        {
 100   2          
 101   2          /*‰∏ªÊ©üËôïÁêÜÈöéÊÆµ --ÈñãÂßã*/
 102   2          if (c_TurboFan.Refresh_TIM == 0 || (c_TurboFan.isRespond == 1 && c_TurboFan.Refresh_TIM < (AVC_TURBOFA
             -N_MASTER_TIMEOUT - AVC_TURBOFAN_REFRESH_TIM)))
 103   2          {
 104   3            c_TurboFan.Tx_DATA[4] = c_TurboFan.isError;
 105   3            c_TurboFan.Tx_DATA[7] = SW_CRC8_Calc(c_TurboFan.Tx_DATA, (AVC_TURBOFAN_TxLEN - 1));
 106   3            UART1_Transmit(&c_TurboFan.Tx_DATA[0], AVC_TURBOFAN_TxLEN);
 107   3            c_TurboFan.Refresh_TIM = AVC_TURBOFAN_MASTER_TIMEOUT;
 108   3            
 109   3            if (c_TurboFan.isRespond == 0 && c_TurboFan.isTirg == 0)
 110   3            {
C51 COMPILER V9.53.0.0   TURBOFANFUNCTION                                                  04/09/2024 13:54:53 PAGE 3   

 111   4              c_TurboFan.TimeCount = AVC_TURBOFAN_DETECTION_TIME;
 112   4              c_TurboFan.isTirg = 1;
 113   4            }
 114   3            
 115   3            c_TurboFan.isRespond = 0;
 116   3          }
 117   2          /*‰∏ªÊ©üËôïÁêÜÈöéÊÆµ --ÁµêÊùü*/
 118   2          
 119   2        }
 120   1        #elif (AVC_TURBOFAN_TYPE == SLAVE)
                {
                  
                  /*ÂæûÊ©üËôïÁêÜÈöéÊÆµ --ÈñãÂßã*/
                  if (c_TurboFan.isRespond == 1 || c_TurboFan.Refresh_TIM == 0)
                  {
                    c_TurboFan.Refresh_TIM = AVC_TURBOFAN_MASTER_TIMEOUT;
                    
                    if (UART1.TxFlag == 0 && c_TurboFan.isRespond == 1)
                    {
                      UART1.Tx_DATA[4] = c_TurboFan.isError;
                      UART1.Tx_DATA[AVC_TURBOFAN_TxLEN - 1] = SW_CRC8_Calc(UART1.Tx_DATA, (AVC_TURBOFAN_TxLEN - 1));
                      UART1_Transmit(&c_TurboFan.Tx_DATA[0], AVC_TURBOFAN_TxLEN);
                   //   UART1.RxFlag = 0;
                    }
                    
                    if (c_TurboFan.isRespond == 0 && c_TurboFan.isTirg == 0)
                    {
                      c_TurboFan.TimeCount = AVC_TURBOFAN_DETECTION_TIME;
                      c_TurboFan.isTirg = 1;
                    }
                    
                    c_TurboFan.isRespond = 0;
                  }
                  /*ÂæûÊ©üËôïÁêÜÈöéÊÆµ --ÁµêÊùü*/
                  
                }
                #else
                {
                  #error "AVC_TURBOFAN_TYPE setting error."
                }
                #endif
 152   1      
 153   1        /*Êï∏ÊìöÊé•Êî∂ËôïÁêÜÈöéÊÆµ --ÈñãÂßã*/
 154   1        if (UART1.RxFlag == 1)
 155   1        {
 156   2          if (UART1.rLen == AVC_TURBOFAN_TxLEN && UART1.Rx_DATA[0] == AVC_TURBOFAN_HEADER_ID)
 157   2          {
 158   3            if (SW_CRC8_Calc(UART1.Rx_DATA, (AVC_TURBOFAN_TxLEN - 1)) == UART1.Rx_DATA[(AVC_TURBOFAN_TxLEN - 1)]
             - && UART1.Rx_DATA[1] == AVC_TURBOFAN_GET_ID)
 159   3            {
 160   4              c_TurboFan.isRespond = 1;
 161   4              
 162   4              if (UART1.Rx_DATA[4] == AVC_TURBOFAN_ALARM_CHAR && c_TurboFan.isTirg == 0)
 163   4              {
 164   5                c_TurboFan.isTirg = 1;
 165   5                c_TurboFan.TimeCount = AVC_TURBOFAN_DETECTION_TIME;
 166   5              }
 167   4              else if (UART1.Rx_DATA[4] == AVC_TURBOFAN_NORMAL_CHAR && c_TurboFan.isTirg == 1)
 168   4              {
 169   5                c_TurboFan.isTirg = 0;
 170   5                c_TurboFan.TimeCount = AVC_TURBOFAN_DETECTION_TIME;
 171   5              }
C51 COMPILER V9.53.0.0   TURBOFANFUNCTION                                                  04/09/2024 13:54:53 PAGE 4   

 172   4            }
 173   3          }
 174   2          UART1.RxFlag = 0;
 175   2          UART1.rLen = 0;
 176   2          memset(UART1.Rx_DATA, 0, strlen(UART1.Rx_DATA));
 177   2        }
 178   1        /*Êï∏ÊìöÊé•Êî∂ËôïÁêÜÈöéÊÆµ --ÁµêÊùü*/
 179   1       
 180   1        /*Ëá™Ê™¢Ê∏¨ÁãÄÊÖãÊõ¥Êñ∞ÈöéÊÆµ --ÈñãÂßã*/
 181   1        #if (AVC_TURBOFAN_ALARMTEST_Enable == 1)
                {
                  if (mcPwmInput.PWMDuty < _Q15(0.3))
                  {
                    c_TurboFan.isError = AVC_TURBOFAN_ALARM_CHAR;
                  }
                  else
                  {
                    c_TurboFan.isError = AVC_TURBOFAN_NORMAL_CHAR;
                  }
                  
                }
                #elif (AVC_TURBOFAN_ALARMTEST_Enable == 0)
 194   1        {
 195   2          if ((mcFocCtrl.SpeedFlt < (mcSpeedRamp.TargetValue >> 1) && mcState == mcRun) || mcFaultSource.Source 
             -!= NoFault)
 196   2          {
 197   3            c_TurboFan.isError = AVC_TURBOFAN_ALARM_CHAR;
 198   3          }
 199   2          else if (mcFocCtrl.SpeedFlt > (mcSpeedRamp.TargetValue * 0.7) && mcState == mcRun)
 200   2          {
 201   3            c_TurboFan.isError = AVC_TURBOFAN_NORMAL_CHAR;
 202   3          }
 203   2          
 204   2          
 205   2          if (UART1.TxFlag == 0)
 206   2          {
 207   3            /*ÊâÄÊúâÁãÄÊÖãÊåáÁ§∫Êõ¥Êñ∞ÁöÜÂú®Ê≠§ËôïÈÄ≤Ë°åÊí∞ÂØ´ -- ÈñãÂßã*/
 208   3            if (mcFaultSource.Source != NoFault)
 209   3            {
 210   4              c_TurboFan.Tx_DATA[2] = 'R';
 211   4              if (c_TurboFan.isActive == 1)
 212   4                c_TurboFan.Tx_DATA[3] = 'T';
 213   4              else
 214   4                c_TurboFan.Tx_DATA[3] = '9';
 215   4            }
 216   3            else
 217   3            {
 218   4              c_TurboFan.Tx_DATA[2] = 'P';
 219   4              c_TurboFan.Tx_DATA[3] = 'x';
 220   4              
 221   4            }
 222   3            /*ÊâÄÊúâÁãÄÊÖãÊåáÁ§∫Êõ¥Êñ∞ÁöÜÂú®Ê≠§ËôïÈÄ≤Ë°åÊí∞ÂØ´ -- ÁµêÊùü*/
 223   3          }
 224   2        }
 225   1        #else
                {
                  #error "AVC_TURBOFAN_ALARMTEST_Enable setting error."
                }
                #endif
 230   1        /*Ëá™Ê™¢Ê∏¨ÁãÄÊÖãÊõ¥Êñ∞ÈöéÊÆµ --ÁµêÊùü*/
 231   1        
 232   1        /*TurboFan Ëß∏ÁôºËôïÁêÜÈöéÊÆµ --ÈñãÂßã*/
C51 COMPILER V9.53.0.0   TURBOFANFUNCTION                                                  04/09/2024 13:54:53 PAGE 5   

 233   1        if (c_TurboFan.TimeCount == 0)
 234   1        {
 235   2          #if (AVC_TURBOFAN_ACTIVE_Enable == 1)
 236   2          {
 237   3            c_TurboFan.isActive = c_TurboFan.isTirg;  // Êõ¥Êñ∞Ëß∏ÁôºÁãÄÊÖã
 238   3          }
 239   2          #endif
 240   2        }
 241   1        
 242   1        if (c_TurboFan.isActive == 1)
 243   1        {
 244   2          mcSpeedRamp.TargetValue = RPM2SpeedFlt(AVC_TURBOFAN_RUN_SPEED);
 245   2        }
 246   1        /*TurboFan Ëß∏ÁôºËôïÁêÜÈöéÊÆµ --ÁµêÊùü*/
 247   1      }
 248          


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    559    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =     18    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
