C51 COMPILER V9.53.0.0   AMP                                                               04/09/2024 13:54:56 PAGE 1   


C51 COMPILER V9.53.0.0, COMPILATION OF MODULE AMP
OBJECT MODULE PLACED IN .\Objects\AMP.obj
COMPILER INVOKED BY: D:\Keil_v5\C51\BIN\C51.EXE ..\User\source\Hardware\AMP.c LARGE OMF2 OPTIMIZE(8,SPEED) BROWSE INCDIR
                    -(..\FU68xx_Hardware_Driver\Include;..\User\include) DEBUG PRINT(.\Listings\AMP.lst) TABS(2) OBJECT(.\Objects\AMP.obj)

line level    source

   1          /* --------------------------- (C) COPYRIGHT 2020 Fortiortech ShenZhen -----------------------------
   2              File Name      : AMP.c
   3              Author         : Fortiortech  Appliction Team
   4              Version        : V1.0
   5              Date           : 2020-04-11
   6              Description    : This file contains .C file function used for Motor Control.
   7          ----------------------------------------------------------------------------------------------------  
   8                                                 All Rights Reserved
   9          ------------------------------------------------------------------------------------------------- */
  10          #include "FU68xx_4.h"
  11          #include "MyProject.h"
  12          
  13          void AMP_Init(void)
  14          {
  15   1        #if (Shunt_Resistor_Mode == Single_Resistor) 
  16   1        {
  17   2          /*****AMP 端口模拟功能设置******/
  18   2          SetBit(P3_AN , P31);            //AMP0 Pin设置为模拟模式  +
  19   2          SetBit(P3_AN , P30);            //AMP0 Pin设置为模拟模式  -
  20   2          SetBit(P2_AN , P27);            //AMP0 Pin设置为模拟模式  O
  21   2      
  22   2          //000-->Genaral AMP 001-->2X 010-->4X 011-->8X 100-->16X 101-->32X Others-->32X
  23   2          /**********AMP0 PGA SET************/
  24   2          #if (HW_AMPGAIN == 0)    //Genaral AMP
                    ClrBit(AMP0_GAIN , AMP0_GAIN2); //0x80
                    ClrBit(AMP0_GAIN , AMP0_GAIN1); //0x40
                    ClrBit(AMP0_GAIN , AMP0_GAIN0); //0x20
                  #elif (HW_AMPGAIN == Gain_2)   //2X
                    ClrBit(AMP0_GAIN , AMP0_GAIN2); //0x80
                    ClrBit(AMP0_GAIN , AMP0_GAIN1); //0x40
                    SetBit(AMP0_GAIN , AMP0_GAIN0); //0x20
                  #elif (HW_AMPGAIN == Gain_4)  //4X
                    ClrBit(AMP0_GAIN , AMP0_GAIN2); //0x80
                    SetBit(AMP0_GAIN , AMP0_GAIN1); //0x40
                    ClrBit(AMP0_GAIN , AMP0_GAIN0); //0x20
                  #elif (HW_AMPGAIN == Gain_8)  //8X
  37   2            ClrBit(AMP0_GAIN , AMP0_GAIN2); //0x80
  38   2            SetBit(AMP0_GAIN , AMP0_GAIN1); //0x40
  39   2            SetBit(AMP0_GAIN , AMP0_GAIN0); //0x20
  40   2          #elif (HW_AMPGAIN == Gain_16) //16X
                    SetBit(AMP0_GAIN , AMP0_GAIN2); //0x80
                    ClrBit(AMP0_GAIN , AMP0_GAIN1); //0x40
                    ClrBit(AMP0_GAIN , AMP0_GAIN0); //0x20
                  #elif (HW_AMPGAIN == Gain_32) //32X
                    SetBit(AMP0_GAIN , AMP0_GAIN2); //0x80
                    ClrBit(AMP0_GAIN , AMP0_GAIN1); //0x40
                    SetBit(AMP0_GAIN , AMP0_GAIN0); //0x20
                  #else
                    #error "HW_AMPGAIN setting error!"
                  #endif
  51   2              
  52   2          SetBit(AMP_CR , AMP0EN);        //AMP0 Enable
  53   2        }
  54   1        #elif (Shunt_Resistor_Mode == Double_Resistor)
C51 COMPILER V9.53.0.0   AMP                                                               04/09/2024 13:54:56 PAGE 2   

                {
                  SetBit(P1_AN , P16);            //AMP1 Pin设置为模拟模式  +
                  SetBit(P1_AN , P17);            //AMP1 Pin设置为模拟模式  -
                  SetBit(P2_AN , P20);            //AMP1 Pin设置为模拟模式  O
              
                  SetBit(P2_AN , P21);            //AMP2 Pin设置为模拟模式  +
                  SetBit(P2_AN , P22);            //AMP2 Pin设置为模拟模式  -
                  SetBit(P2_AN , P23);            //AMP2 Pin设置为模拟模式  O
                  ClrBit(P2_OE , P23);            //P23_OE需要强制为0，禁止DA1输出至PAD  
                  
                  SetBit(P3_AN , P31);            //AMP0 Pin设置为模拟模式  +
                  SetBit(P3_AN , P30);            //AMP0 Pin设置为模拟模式  -
                  SetBit(P2_AN , P27);            //AMP0 Pin设置为模拟模式  O
                  
                  ClrBit(AMP0_GAIN , AMP0_GAIN2);
                  ClrBit(AMP0_GAIN , AMP0_GAIN1);
                  ClrBit(AMP0_GAIN , AMP0_GAIN0);
                  
                  SetBit(AMP_CR , AMP0EN);
                  SetBit(AMP_CR , AMP1EN);        //AMP1 Enable
                  SetBit(AMP_CR , AMP2EN);        //AMP2 Enable
                }
                #elif (Shunt_Resistor_Mode == Three_Resistor)
                {
                  SetBit(P1_AN , P16);            //AMP1 Pin设置为模拟模式  +
                  SetBit(P1_AN , P17);            //AMP1 Pin设置为模拟模式  -
                  SetBit(P2_AN , P20);            //AMP1 Pin设置为模拟模式  O
              
                  SetBit(P2_AN , P21);            //AMP2 Pin设置为模拟模式  +
                  SetBit(P2_AN , P22);            //AMP2 Pin设置为模拟模式  -
                  SetBit(P2_AN , P23);            //AMP2 Pin设置为模拟模式  O
                  ClrBit(P2_OE , P23);            //P23_OE需要强制为0，禁止DA1输出至PAD  
                  
                  SetBit(P3_AN , P31);            //AMP0 Pin设置为模拟模式  +
                  SetBit(P3_AN , P30);            //AMP0 Pin设置为模拟模式  -
                  SetBit(P2_AN , P27);            //AMP0 Pin设置为模拟模式  O
                  
                  ClrBit(AMP0_GAIN , AMP0_GAIN2);
                  ClrBit(AMP0_GAIN , AMP0_GAIN1);
                  ClrBit(AMP0_GAIN , AMP0_GAIN0);
                  
                  SetBit(AMP_CR , AMP0EN);
                  SetBit(AMP_CR , AMP1EN);        //AMP1 Enable
                  SetBit(AMP_CR , AMP2EN);        //AMP2 Enable       
                }
                #endif
 101   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =     41    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----    ----
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.53.0.0   AMP                                                               04/09/2024 13:54:56 PAGE 3   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
